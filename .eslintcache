[{"/home/owner/dojo/js/hook/hookform/src/reportWebVitals.js":"1","/home/owner/dojo/js/hook/hookform/src/App.js":"2","/home/owner/dojo/js/hook/hookform/src/App.test.js":"3","/home/owner/dojo/js/hook/hookform/src/index.js":"4","/home/owner/dojo/js/hook/hookform/src/components/Results.jsx":"5","/home/owner/dojo/js/hook/hookform/src/components/Form.jsx":"6"},{"size":362,"mtime":1610076956908,"results":"7","hashOfConfig":"8"},{"size":381,"mtime":1610322082026,"results":"9","hashOfConfig":"8"},{"size":246,"mtime":1610076956908,"results":"10","hashOfConfig":"8"},{"size":500,"mtime":1610076956908,"results":"11","hashOfConfig":"8"},{"size":412,"mtime":1610150006099,"results":"12","hashOfConfig":"8"},{"size":3500,"mtime":1610321865269,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"w0gkao",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"/home/owner/dojo/js/hook/hookform/src/reportWebVitals.js",[],"/home/owner/dojo/js/hook/hookform/src/App.js",[],"/home/owner/dojo/js/hook/hookform/src/App.test.js",[],"/home/owner/dojo/js/hook/hookform/src/index.js",[],"/home/owner/dojo/js/hook/hookform/src/components/Results.jsx",["28"],"\nimport React, { useState } from 'react';\nconst Results = (props) => {\n    const {firstname, lastname, email, confirm ,password} = props.data;\n    return(\n        <div>\n            <p>First Name: {firstname}</p>\n            <p>Last Name: {lastname}</p>\n            <p>Email: {email}</p>\n            <p>password: {password}</p>\n            <p>confirm: {confirm}</p>\n\n        </div>\n    );\n}\nexport default Results","/home/owner/dojo/js/hook/hookform/src/components/Form.jsx",["29"],"import React, { useState } from 'react';\nconst Form = (props) => {\n    const [firstname, setFirstname] = useState(\"\");\n    const [firstnameErr, setfirstnameErr] = useState(\"\")\n    const [lastname, setlastname] = useState(\"\");\n    const [lastnameErr, setlastnameErr] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [emailErr, setemailErr] = useState(\"\")\n    const [password, setpassword]= useState(\"\");\n    const [passwordErr, setpasswordErr] = useState(\"\");\n    const [confirm, setconfirm] = useState(\"\");\n    const [confirmErr, setconfirmErr] = useState(\"\");\n\n\n\nconst firstnameHandler= (e)=> {\n    setFirstname(e.target.value);\n    if (e.target.value.length < 2) \n    {\n        setfirstnameErr(\"first name needs to be at least two chracters\")   \n    }\n    else{\n        setfirstnameErr(\"\"); \n    }\n    \n}\n\nconst lastnameHandler= (e)=> {\n    setlastname(e.target.value);\n    if (e.target.value.length < 2) \n    {\n        setlastnameErr(\"first name needs to be at least two chracters\")   \n    }\n    else{\n        setlastnameErr(\"\"); \n    }\n    \n}\n\nconst emailHandler= (e)=> {\n    setEmail(e.target.value);\n    if (e.target.value.length < 2) \n    {\n        setemailErr(\"first name needs to be at least two chracters\")   \n    }\n    else{\n        setemailErr(\"\"); \n    }\n    \n}\n\nconst passwordHandler = (e)=> {\n    setpassword(e.target.value);\n    if (e.target.value.length < 2) \n    {\n        setpasswordErr(\"first name needs to be at least two chracters\")   \n    }\n    else{\n        setpasswordErr(\"\"); \n    }\n    \n}\nconst confirmHandler = (e)=> {\n    setconfirm(e.target.value);\n    if (e.target.value.length < 2) \n    {\n        setconfirmErr(\"first name needs to be at least two chracters\")   \n    }\n    else{\n        setconfirmErr(\"\"); \n    }\n    \n}\n    \nconst createUser = (e) => {\n    e.preventDefault();\n    const newUser = {firstname, lastname, email, password, confirm };\n\n\n }\nreturn(\n    <>\n    <form onSubmit={createUser}>\n        <div>\n            <label htmlFor= \"firstname\"> First Name:</label>\n            <input onChange ={ firstnameHandler } type=\"text\" name=\"firstname\"/>\n            {\n                firstnameErr ?\n                <p>{firstnameErr}</p>:''\n            }\n        </div>\n        <div>\n            <label htmlfor=\"lastname\"> Last Name:</label>\n            <input onChange ={ lastnameHandler } type=\"text\" name=\"lastname\" />\n            {\n                lastnameErr ?\n                <p>{lastnameErr}</p>:''\n            }\n        </div>\n        <div>\n            <label htmlfor = \"email\"> Email:</label>\n            <input onChange ={ emailHandler } type=\"email\" name=\"email\" />\n            {\n                emailErr ?\n                <p>{emailErr}</p>:''\n            }\n        </div>\n        <div>\n            <label htmlfor=\"password\"> Password: </label>\n            <input onChange ={ passwordHandler } type=\"text\" name=\" password\" />\n            {\n                passwordErr ?\n                <p>{passwordErr}</p>:''\n            }\n        </div>\n        <div>\n            <label htmlfor=\"confirmPass\"> ConfrimPass:</label>\n            <input onChange ={ confirmHandler } type=\"text\" name=\"confrim\" />\n            {\n                confirmErr ?\n                <p>{confirmErr}</p>:''\n            }\n        </div>\n        \n        <input type=\"submit\"/>\n    </form>\n    <div>\n            <p>Form Data</p>\n            <p>Full Name: {firstname} {lastname}</p>\n            <p>Email: {email}</p>\n        </div>\n\n    </>\n);\n\n};\nexport default Form;\n",{"ruleId":"30","severity":1,"message":"31","line":2,"column":17,"nodeType":"32","messageId":"33","endLine":2,"endColumn":25},{"ruleId":"30","severity":1,"message":"34","line":77,"column":11,"nodeType":"32","messageId":"33","endLine":77,"endColumn":18},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'newUser' is assigned a value but never used."]